name: Test and deploy
on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  run_test:
    name: Run Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: "17"
      - name: Cache Maven Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Maven Clean Verify
        run: mvn clean verify
      - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: './unit-test.Dockerfile'
          context: .
          push: true
          tags: nathanramli/spring-boot-miniproject-unit-test:latest
  build:
    needs: run_test
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: "17"
      - name: Cache Maven Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Test
        run: mvn clean package -Dmaven.test.skip=true
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: './deploy.Dockerfile'
          context: .
          push: true
          tags: nathanramli/spring-boot-miniproject:latest
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Upload environment file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "deploy.env"
          target: "env"
      - name: Deploy Using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker stop spring-boot-miniproject
            docker stop spring-boot-miniproject-unit-test
            docker rm spring-boot-miniproject
            docker rm spring-boot-miniproject-unit-test
            docker rmi nathanramli/spring-boot-miniproject:latest
            docker rmi nathanramli/spring-boot-miniproject-unit-test:latest
            docker pull nathanramli/spring-boot-miniproject:latest
            docker pull nathanramli/spring-boot-miniproject-unit-test:latest
            docker run -d --name spring-boot-miniproject --env-file env/deploy.env -p 80:8080 nathanramli/spring-boot-miniproject:latest
            docker run -d --name spring-boot-miniproject-unit-test -p 8000:80 nathanramli/spring-boot-miniproject-unit-test:latest